/*
 ID: swagchicken1
 PROG:
 LANG: C++11
 */

#include <iostream>
#include <tuple>
#include <cmath>
#include <string>
#include <cstring>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <map>
#include <unordered_map>
#include <set>
#include <algorithm>
#include <vector>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <cctype>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector< vector <int> > vvi;
typedef pair<int, int> pii;
typedef pair < pair < int, int >, int > piii;
typedef pair < pair <int, int > , pair <int, int> > piiii;

#define FOR(i,a,b) for(int i = a; i < b; i ++)
#define RFOR(i,a,b) for(int i = a-1; i >= b; i --)

#define endl '\n';

#define mp make_pair
#define pb push_back
#define f first
#define s second30

const int MOD = 1000000007;
double PI = 4*atan(1);

ll ways[60][60];
ll N,M,K;

ll  recurse(int n, int k, int m) {
  if( n == 0 || k == 0) {
    if (n == 0 && k == 0) {return 1;}
    return 0;
  }
  
  else if ( k > n) return 0;
  
 else if (ways[n][k] != 0) return ways[n][k];
  
  else {
    
    FOR(i,1,m+1) {
      if (n-i >= 0) {ways[n][k] += recurse(n - i, k - 1, m);}
    }
    
    return ways[n][k];
  }
  
}


int main() {
    ios_base::sync_with_stdio(0);cin.tie(0);
    //  ofstream fout("");
    //  ifstream fin("");
    
    while (cin >> N >> K >> M) {
      memset(ways,0,sizeof ways);
      recurse(N,K,M);
      cout << ways[N][K] << endl;
    }
    // fin.close();
    //  fout.close();
}



