/*
 ID: swagchicken1
 PROG:
 LANG: C++11
 */

#include <iostream>
#include <tuple>
#include <cmath>
#include <string>
#include <cstring>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <map>
#include <unordered_map>
#include <set>
#include <algorithm>
#include <vector>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <cctype>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector< vector <int> > vvi;
typedef pair<int, int> pii;
typedef pair < pair < int, int >, int > piii;
typedef pair < pair <int, int > , pair <int, int> > piiii;

#define FOR(i,a,b) for(int i = a; i < b; i ++)
#define RFOR(i,a,b) for(int i = a-1; i >= b; i --)

#define endl '\n';

#define mp make_pair
#define pb push_back
#define f first
#define s second

const int MOD = 1000000007;
double PI = 4*atan(1);

int used[26] = {};
int cons[26][26] = {};
vector < char > uletters;
string topo;

bool valid(int n, string topo) {
 FOR(i,0,topo.length()) {
     if(cons[n][topo[i] - 'a'] == 1) { return false;}
 }
 return true;
}

void recurse(string topo){
    if(topo.length() == uletters.size()) {
    	cout << topo << endl;
    }
    FOR(i,0,uletters.size()){
        bool good = valid(uletters[i] -'a',topo);
        if(used[uletters[i] - 'a'] == 0 && good) {
        	topo += uletters[i];
        	used[uletters[i] - 'a'] = 1;
        	recurse(topo);
        	used[uletters[i] - 'a'] = 0;
        	topo = topo.substr(0,topo.length()-1);
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);cin.tie(0);
    //  ofstream fout("");
    //  ifstream fin("");
    string letters;
    string constraints;
    int count = 0;
    while(getline(cin,letters) && getline(cin, constraints)) {
    	if (count) cout << endl;
    	stringstream ssl(letters);
    	stringstream ssc(constraints);
    	char c1,c2;
	memset(used,0,sizeof used);
	memset(cons,0, sizeof cons);
	uletters.clear();
    	while(ssl >> c1) {
    	    uletters.pb(c1);
    	}
    	sort(uletters.begin(), uletters.end());
    	while(ssc >> c1 >> c2) {
    	   cons[c1- 'a'][c2-'a'] = 1;
    	}
	recurse("");
	count ++;
	

    }
    
    // fin.close();
    //  fout.close();
}

