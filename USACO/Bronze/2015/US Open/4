/*
 ID: swagchicken1
 PROG:
 LANG: C++11
 */
 
#include <iostream>
#include <tuple>
#include <cmath>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <map>
#include <unordered_map>
#include <set>
#include <algorithm>
#include <vector>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <cctype>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector< vector <int> > vvi;
typedef pair<int, int> pii;
typedef pair < pair < int, int >, int > piii;
typedef pair < pair <int, int > , pair <int, int> > piiii;

#define FOR(i,a,b) for(int i = a; i < b; i ++)
#define RFOR(i,a,b) for(int i = a-1; i >= b; i --)

#define endl '\n';

#define mp make_pair
#define pb push_back
#define f first
#define s second

const int MOD = 1000000007;
double PI = 4*atan(1);


int n;
map <string , int> paths;
map <string, int> paths2;
char grid[20][20];
int c = 0;

void recursef(string dir, int d) {
  if (d == n) {
    string pal = "";
    pal += grid[0][0];
    int R = 0;
    int C = 0;
    int depth = 0;
    FOR(i,0,n-1) {
      if(dir[i] == 'R') {
        C++;
        pal += grid[R][C];
      }
      else {
        R++;
        pal += grid[R][C];
        depth++;
      }
    }
    paths2[pal] = 1;
    pal += to_string(depth);
    paths[pal] = 1;
    return;
  }
  recursef(dir + 'R',d+1);
  recursef(dir + 'D', d+1);
}

void recurseb(string dir, int d) {
  if (d == n) {
    string pal = "";
    pal += grid[n-1][n-1];
    int R = n-1;
    int C = n-1;
    int depth = n-1;
    FOR(i,0,n-1) {
      if(dir[i] == 'L') {
        C--;
        pal += grid[R][C];
      }
      else {
        R--;
        pal += grid[R][C];
        depth--;
      }
    }
    pal += to_string(depth);
    if (paths[pal] == 1) {
      c += paths2[pal.substr(0,n)]; paths[pal] = 0;
      paths2[pal.substr(0,n)] = 0;
    }

    return;
  }
  recurseb(dir + 'L',d+1);
  recurseb(dir + 'U', d+1);
}

int main() {
    ios_base::sync_with_stdio(0);cin.tie(0);
      ofstream fout("palpath.out");
      ifstream fin("palpath.in");


 fin >> n;
    FOR(i,0,n) {
      FOR(j,0,n) {
        fin >> grid[i][j];
      }
    }
recursef("",1);
recurseb("",1);
fout << c;

    fin.close();
      fout.close();
}
