/*
 ID: swagchicken1
 PROG:
 LANG: C++11
 */

#include <iostream>
#include <tuple>
#include <cmath>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
#include <vector>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <cctype>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;

#define FOR(i,a,b) for(int i = a; i < b; i ++)
#define RFOR(i,a,b) for(int i = a-1; i >= b; i --)


#define mp make_pair
#define pb push_back
#define f first
#define s second
 
const int MOD = 1000000007;
double PI = 4*atan(1);



int main() {
    ios_base::sync_with_stdio(0);cin.tie(0);
      ofstream fout("helpcross.out");
      ifstream fin("helpcross.in");
    int n,m ; fin >> n >> m;
    vector<int> chicklist;
    pii cowlist[20000] = {};
    FOR(i,0,n) {
        int x;
        fin >> x;
        chicklist.pb(x);
    }
    FOR(i,0,m) {
        int x,y; fin >> x >> y;
        cowlist[i] = mp(y,x);
    }
    int pair = 0;
    sort(chicklist.begin(),chicklist.end());
    sort(cowlist,cowlist+m);
    FOR(i,0,m) {
        int min = 0;
        int max = chicklist.size();
        int temp = 0;
        bool foundpair = false;
        while (max != min) {
            int mid = (max+min)/2;
            if (cowlist[i].second <= chicklist[mid] && chicklist[mid] <= cowlist[i].first) {
                temp = mid;
                max = mid;
                foundpair = true;
            }
            else if (chicklist[mid] > cowlist[i].first) {
                max = mid;
            }
            
            else min = mid + 1;
            
        }
        
        if (chicklist.size() > 0 && foundpair ) chicklist.erase(chicklist.begin() + temp);
        if (foundpair) pair ++;
    }
    fout << pair;
     fin.close();
      fout.close();
}

